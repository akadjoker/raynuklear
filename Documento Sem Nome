typedef struct {
	double a;		/* x-coefficient */
	double b;		/* y-coefficient */
	double c;		/* constant term */
} line;

#define DIMENSION	2	/* dimension of points */
#define X		0	/* x-coordinate index */
#define	Y		1	/* y-coordinate index */

typedef double point[DIMENSION];

#define MAXPOLY		200	/* maximum number of points in a polygon */

typedef struct {
	int n;			/* number of points in polygon */
	point p[MAXPOLY];	/* array of points in polygon */
} polygon;


typedef struct {
	point p1,p2;		/* endpoints of line segment */
} segment;

typedef point triangle[3];	/* triangle datatype */

typedef struct {
	int n;			/* number of triangles in triangulation */
	int t[MAXPOLY][3];	/* indicies of vertices in triangulation */
} triangulation;

typedef struct {
	point c;		/* center of circle */
	double r;		/* radius of circle */
} circle;


/*	Comparison macros 	*/

#define	max(A, B)		((A) > (B) ? (A) : (B))
#define min(A, B)		((A) < (B) ? (A) : (B))


using namespace std;

#define WINDOW_WIDTH 1200
#define WINDOW_HEIGHT 800

const int PIXELRATIO=30;


void points_to_line(point p1, point p2, line *l)
{
	if (p1[X] == p2[X]) {
		l->a = 1;
		l->b = 0;
		l->c = -p1[X];
	} else {
	        l->b = 1;
		l->a = -(p1[Y]-p2[Y])/(p1[X]-p2[X]);
		l->c = -(l->a * p1[X]) - (l->b * p1[Y]);
	}
}

void point_and_slope_to_line(point p, double m, line *l)
{
	l->a = -m;
	l->b = 1;
	l->c = -((l->a*p[X]) + (l->b*p[Y]));
}

bool parallelQ(line l1, line l2)
{
	return ( (fabs(l1.a-l2.a) <= EPSILON) &&
		 (fabs(l1.b-l2.b) <= EPSILON) );
}

bool same_lineQ(line l1, line l2)
{
	return ( parallelQ(l1,l2) && (fabs(l1.c-l2.c) <= EPSILON) );
}


void intersection_point(line l1, line l2, point p)
{
	if (same_lineQ(l1,l2)) {
		printf("Warning: Identical lines, all points intersect.\n");
		p[X] = p[Y] = 0.0;
		return;
	}

	if (parallelQ(l1,l2) == true) {
		printf("Error: Distinct parallel lines do not intersect.\n");
		return;
	}

	p[X] = (l2.b*l1.c - l1.b*l2.c) / (l2.a*l1.b - l1.a*l2.b);

	if (fabs(l1.b) > EPSILON)	/* test for vertical line */
		p[Y] = - (l1.a * (p[X]) + l1.c) / l1.b;
	else
		p[Y] = - (l2.a * (p[X]) + l2.c) / l2.b;
}

void closest_point(point p_in, line l, point p_c)
{
	line perp;		/* perpendicular to l through (x,y) */

	if (fabs(l.b) <= EPSILON) {	/* vertical line */
		p_c[X] = -(l.c);
		p_c[Y] = p_in[Y];
		return;
	}

	if (fabs(l.a) <= EPSILON) {	/* horizontal line */
		p_c[X] = p_in[X];
		p_c[Y] = -(l.c);
		return;
	}

	point_and_slope_to_line(p_in,1/l.a,&perp); /* non-degenerate line */
/*printf("perpendicular bisector "); print_line(perp);*/
	intersection_point(l,perp,p_c);
/*printf("closest point "); print_point(p_c);*/
}

double distance(point a, point b)
{
        int i;			/* counter */
        double d=0.0;		/* accumulated distance */

        for (i=0; i<DIMENSION; i++)
                d = d + (a[i]-b[i]) * (a[i]-b[i]);

        return( sqrt(d) );
}

/***********************************************************************/

void copy_point(point a, point b)
{
	int i;			/* counter */

	for (i=0; i<DIMENSION; i++) b[i] = a[i];
}

void swap_point(point a, point b)
{
	point c;		/* temporary point */

	copy_point(a,c);
	copy_point(b,a);
	copy_point(c,b);
}


void points_to_segment(point a, point b, segment *s)
{
	copy_point(a,s->p1);
	copy_point(b,s->p2);
}

void segment_to_points(segment s, point p1, point p2)
{
	copy_point(s.p1,p1);
	copy_point(s.p2,p2);
}


bool point_in_box(point p, point b1, point b2)
{
	return( (p[X] >= min(b1[X],b2[X])) && (p[X] <= max(b1[X],b2[X]))
		&& (p[Y] >= min(b1[Y],b2[Y])) && (p[Y] <= max(b1[Y],b2[Y])) );
}

bool segments_intersect(segment s1, segment s2)
{
	line l1,l2;		/* lines containing the input segments */
	point p;		/* intersection point */

	points_to_line(s1.p1,s1.p2,&l1);
	points_to_line(s2.p1,s2.p2,&l2);

	if (same_lineQ(l1,l2)) 	/* overlapping or disjoint segments */
		return( point_in_box(s1.p1,s2.p1,s2.p2) ||
			point_in_box(s1.p2,s2.p1,s2.p2) ||
			point_in_box(s2.p1,s1.p1,s1.p2) ||
			point_in_box(s2.p2,s1.p1,s1.p2) );

	if (parallelQ(l1,l2)) return(false);

	intersection_point(l1,l2,p);

	return( point_in_box(p,s1.p1,s1.p2) && point_in_box(p,s2.p1,s2.p2) );
}

double signed_triangle_area(point a, point b, point c)
{
	return( (a[X]*b[Y] - a[Y]*b[X] + a[Y]*c[X]
		- a[X]*c[Y] + b[X]*c[Y] - c[X]*b[Y]) / 2.0 );
}

double triangle_area(point a, point b, point c)
{
	return( fabs(signed_triangle_area(a,b,c)) );
}

bool ccw(point a, point b, point c)
{
//	double signed_triangle_area();

	return (signed_triangle_area(a,b,c) > EPSILON);
}

bool cw(point a, point b, point c)
{
	//double signed_triangle_area();

	return (signed_triangle_area(a,b,c) < - EPSILON);
}

bool collinear(point a, point b, point c)
{
//	double signed_triangle_area();

	return (fabs(signed_triangle_area(a,b,c)) <= EPSILON);
}



void add_triangle(triangulation *t, int i, int j, int k, polygon *p)
{
	int n;				/* number of triangles in t */

	n = t->n;

	t->t[n][0] = i;
	t->t[n][1] = j;
	t->t[n][2] = k;

	t->n = n + 1;
}




bool point_in_triangle(point p, triangle t)
{
	int i;				/* counter */

	for (i=0; i<3; i++)
		if (cw(t[i],t[(i+1)%3],p)) return false;

	return true;
}



double area(polygon *p)
{
	double total = 0.0;		/* total area so far */
	int i, j;			/* counters */

	for (i=0; i<p->n; i++) {
		j = (i+1) % p->n;
		total += (p->p[i][X]*p->p[j][Y]) - (p->p[j][X]*p->p[i][Y]);
	}

	return(total / 2.0);
}

bool ear_Q(int i, int j, int k, polygon *p)
{
	triangle t;			/* coordinates for points i,j,k */
	int m;				/* counter */

	copy_point(p->p[i],t[0]);
	copy_point(p->p[j],t[1]);
	copy_point(p->p[k],t[2]);

	if (cw(t[0],t[1],t[2])) return(false);

	for (m=0; m<p->n; m++) {
		if ((m!=i) && (m!=j) && (m!=k))
			if (point_in_triangle(p->p[m],t)) return(false);
	}

	return(false);
}

void triangulate(polygon *p, triangulation *t)
{
	int l[MAXPOLY], r[MAXPOLY];	/* left/right neighbor indices */
	int i;				/* counter */

	for (i=0; i<p->n; i++) {	/* initialization */
		l[i] = ((i-1) + p->n) % p->n;
		r[i] = ((i+1) + p->n) % p->n;
	}

	t->n = 0;
	i = p->n-1;
	while (t->n < (p->n-2)) {
		i = r[i];
		if (ear_Q(l[i],i,r[i],p)) {
			add_triangle(t,l[i],i,r[i],p);
			l[ r[i] ] = l[i];
			r[ l[i] ] = r[i];
		}
	}
}


double area_triangulation(polygon *p)
{
	triangulation t;                /* output triangulation */
	double total = 0.0;		/* total area so far */
        int i;                          /* counter */
//	double triangle_area();

	triangulate(p,&t);
	for (i=0; i<t.n; i++)
		total += triangle_area(p->p[t.t[i][0]],
			p->p[t.t[i][1]], p->p[t.t[i][2]]);

	return(total);
}


/**********

class triangulate
{
	static final int MAXPOLY = 200;
	static final double EPSILON	= 0.000001;
	static class Point
	{
		double x,y;
	}
	
	static class Polygon
	{
		Point p[] = new Point[MAXPOLY];
		int n;
		Polygon()
		{
			for(int i=0;i<MAXPOLY;i++)
				p[i] = new Point();
		}
	}
	
	static class Triangulation
	{
		int n;
		int t[][] = new int[MAXPOLY][3];
	}
	
	static Point copy_point(Point p)
	{
		Point ret = new Point();
		ret.x = p.x;
		ret.y = p.y;
		return ret;
	}
	
	static class Triangle
	{
		Point a, b, c;
	}
	
	static double signed_triangle_area(Point a, Point b, Point c)
	{
		return ((a.x*b.y-a.y*b.x+a.y*c.x-a.x*c.y+b.x*c.y-c.x*b.y)/2.0);
	}

	static boolean cw(Point a, Point b, Point c)
	{
		return signed_triangle_area(a,b,c) < -EPSILON;
	}
	
	static boolean point_in_triangle(Point p, Triangle t)
	{
		if(cw(t.a,t.b,p)) return false;
		if(cw(t.b,t.c,p)) return false;
		if(cw(t.c,t.a,p)) return false;
		return true;
	}
	
	static boolean ear_Q(int i, int j, int k, Polygon p)
	{
		Triangle t = new Triangle();
		t.a = p.p[i];
		t.b = p.p[j];
		t.c = p.p[k];
		
		if(cw(t.a,t.b,t.c)) return false;
		
		for(int m=0;m<p.n;m++)
			if(m!=i&&m!=j&&m!=k)
				if(point_in_triangle(p.p[m],t))
					return false;
		
		return true;
	}
	
	static Triangulation Triangulate(Polygon p)
	{
		int l[] = new int [MAXPOLY];
		int r[] = new int [MAXPOLY];
		for(int i=0;i<p.n;i++)
		{
			l[i] = (i-1+p.n)%p.n;
			r[i] = (i+1+p.n)%p.n;
		}
		Triangulation t = new Triangulation();
		t.n = 0;
		int i = p.n-1;
		while(t.n < p.n - 2)
		{
			i = r[i];
			if(ear_Q(l[i],i,r[i],p))
			{
				t.t[t.n][0] = l[i];
				t.t[t.n][1] = i;
				t.t[t.n][2] = r[i];
				t.n++;
				l[r[i]] = l[i];
				r[l[i]] = r[i];
			}
		}
		return t;
	}
	
	static double triangle_area(Point a, Point b, Point c)
	{
		return Math.abs(signed_triangle_area(a,b,c));
	}
	
	static double area_triangulation(Polygon p)
	{
		Triangulation t = new Triangulation();
		double total = 0;
		t = Triangulate(p);
		for(int i=0;i<t.n;i++)
			total+=triangle_area(p.p[t.t[i][0]],p.p[t.t[i][1]],p.p[t.t[i][2]]);
		return total;
	}
	
	static double area(Polygon p)
	{
		double total = 0;
		for(int i=0;i<p.n;i++)
		{
			int j = (i+1)%p.n;
			total += (p.p[i].x*p.p[j].y) - (p.p[j].x*p.p[i].y);
		}
		return total / 2;
	}

	static public void main(String[] args)
	{
		Polygon p = new Polygon();
		Triangulation t = new Triangulation();
		Scanner sc = new Scanner(System.in);
		p.n = sc.nextInt();
		for(int i=0;i<p.n;i++)
		{
			p.p[i].x = sc.nextDouble();
			p.p[i].y = sc.nextDouble();
		}
		System.out.printf(" area via triangulation = %f\n", area_triangulation(p));
		System.out.printf(" area slick = %f\n", area(p));
	}
}

